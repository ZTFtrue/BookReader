// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "sass:map";
@use "@angular/material" as mat;
@import "./_palette.scss";

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

@include mat.strong-focus-indicators(
  (
    border-style: dotted,
    border-width: 4px,
    border-radius: 2px,
  )
);
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$reader-book-angular-primary: mat.define-palette(mat.$indigo-palette);
$reader-book-angular-accent: mat.define-palette(
  mat.$pink-palette,
  A200,
  A100,
  A400
);

// The warn palette is optional (defaults to red).
$reader-book-angular-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$reader-book-angular-theme: mat.define-light-theme(
  (
    color: (
      primary: $reader-book-angular-primary,
      accent: $reader-book-angular-accent,
      warn: $reader-book-angular-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($reader-book-angular-theme);

$dark-primary: mat.define-palette(mat.$pink-palette);
$dark-accent: mat.define-palette(mat.$blue-gray-palette);
$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $dark-primary,
      accent: $dark-accent,
    ),
  )
);

.bookreader-dark-theme {
  @include mat.all-component-themes($dark-theme);
  color: white;
}

$light-primary: mat.define-palette(mat.$indigo-palette, 500);
$light-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

$light-theme: mat.define-light-theme(
  (
    color: (
      primary: $light-primary,
      accent: $light-accent,
    ),
  )
);
@debug $light-primary;
.bookreader-light-theme {
  @include mat.all-component-themes($light-theme);
}

// Define a light theme

$amber-palette: (
  50: #fff8e1,
  100: #ffecb3,
  200: #ffe082,
  300: #ffd54f,
  400: #ffca28,
  500: #ffc107,
  600: #ffb300,
  700: #ffa000,
  800: #ff8f00,
  900: #ff6f00,
  A100: #ffe57f,
  A200: #ffd740,
  A400: #ffc400,
  A700: #ffab00,
  contrast: (
    50: #ffccbc,
    100: #ffab91,
    200: #ff7043,
    300: #ff5722,
    400: #ff5722,
    500: #ffc107,
    600: #f4511e,
    700: #e64a19,
    800: #d84315,
    900: #bf360c,
    A100: #ff9e80,
    A200: #ff6e40,
    A400: #ff3d00,
    A700: #dd2c00,
  ),
);

// Background palette for dark themes.
$amber-theme-background-palette: (
  status-bar: white,
  app-bar: map.get($grey-palette, 900),
  background: burlywood,
  hover: rgba(white, 0.04),
  // TODO(kara): check style with Material Design UX
  card: rgba(245, 245, 220, 0.562),
  dialog: rgb(222, 184, 135),
  disabled-button: rgba(white, 0.12),
  raised-button: beige,
  focused-button: beige,
  selected-button: map.get($grey-palette, 900),
  selected-disabled-button: map.get($grey-palette, 800),
  disabled-button-toggle: white,
  unselected-chip: map.get($grey-palette, 700),
  disabled-list-option: rgba(white, 0.12),
  tooltip: map.get($grey-palette, 700),
);

// Foreground palette for light themes.
$amber-theme-foreground-palette: (
  base: white,
  divider: white,
  dividers: white,
  disabled: white,
  disabled-button: rgba(white, 0.26),
  disabled-text: beige,
  elevation: beige,
  hint-text: beige,
  secondary-text: white,
  icon: rgba(white, 0.54),
  icons: rgba(white, 0.54),
  background: beige,
  text: rgba(black, 0.87),
  slider-min: rgba(white, 0.87),
  slider-off: rgba(white, 0.26),
  slider-off-active: rgba(white, 0.38),
);

$amber-primary: mat.define-palette($amber-palette, 500);
$amber-accent: mat.define-palette($amber-palette, 200, 100, 400);

// Creates a light-themed color configuration from the specified
// primary, accent and warn palettes.
@function -create-amber-color-config($primary, $accent, $warn: null) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, mat.define-palette(mat.$red-palette)),
    is-dark: false,
    foreground: $amber-theme-foreground-palette,
    background: $amber-theme-background-palette
  );
}
/// Creates a container object for a dark theme to be given to individual component theme mixins.
/// @param {Map} $primary The theme configuration object.
/// @returns {Map} A complete Angular Material theme map.
@function define-amber-theme(
  $primary,
  $accent: null,
  $warn: mat.define-palette(mat.$red-palette)
) {
  $result: $primary;
  @if map.get($primary, color) {
    $color-settings: map.get($primary, color);
    $primary: map.get($color-settings, primary);
    $accent: map.get($color-settings, accent);
    $warn: map.get($color-settings, warn);
    $result: map.merge(
      $result,
      (
        color: -create-amber-color-config($primary, $accent, $warn),
      )
    );
  }
  @return $result;
}

$amber-theme: define-amber-theme(
  (
    color: (
      primary: $amber-primary,
      accent: $amber-accent,
      warn: mat.define-palette(mat.$red-palette),
    ),
    // typography:
    //   mat.define-typography-config(
    //     $font-family: serif,
    //   ),,,,,
  )
);

// Apply the light theme only when the `.my-light-theme` CSS class is applied
// to an ancestor element of the components (such as `body`).
.bookreader-amber-theme {
  @include mat.all-component-themes($amber-theme);
  // @include angular-material-theme($bookreader-amber-theme);
  background: #e9d8ba;

 
  .mat-accent .mat-slider-track-fill {
    background-color: red !important;
  }

  .mat-slider-thumb-label {
    background-color: red !important;
  }

  .mat-slider-thumb {
    background-color: red !important;
  }
  // background: bisque;
}
